:py:mod:`pylbo.automation.generator`
====================================

.. py:module:: pylbo.automation.generator

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pylbo.automation.generator.ParfileGenerator



Functions
~~~~~~~~~

.. autoapisummary::

   pylbo.automation.generator._validate_basename
   pylbo.automation.generator._validate_output_dir



.. py:function:: _validate_basename(basename)

   
   Validates the basename for a given parfile.

   :param basename: The basename for a parfile. If not given, defaults to "parfile".
   :type basename: str

   :returns: **basename** -- The basename for a parfile.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: _validate_output_dir(output_dir)

   
   Validates and returns the output directory for the parfiles.

   :param output_dir: The output directory to store the parfiles in. If not given, defaults to
                      the current working directory.
   :type output_dir: str, ~os.PathLike

   :raises NotADirectoryError: If the output directory is not found.

   :returns: **output** -- The resolved path to the output directory with "parfiles" appended.
   :rtype: ~os.PathLike















   ..
       !! processed by numpydoc !!

.. py:class:: ParfileGenerator(parfile_dict, basename=None, output_dir=None)

   
   Handles parfile generation.

   :param parfile_dict: Dictionary containing the keys to be placed in the parfile.
   :type parfile_dict: dict
   :param basename: The basename for the parfile, the `.par` suffix is added automatically and is
                    not needed. If multiple parfiles are generated, these
                    will be prepended by a 4-digit number (e.g. 0003myparfile.par).
                    If not provided, the basename will default to `parfile`.
   :type basename: str
   :param output_dir: Output directory where the parfiles are saved, defaults to the current
                      working directory if not specified. A subdirectory called `parfiles` will be
                      created in which the parfiles will be saved.
   :type output_dir: str, ~os.PathLike















   ..
       !! processed by numpydoc !!
   .. py:method:: _get_and_check_item(self, namelist, name, allowed_dtypes)

      
      Does typechecking on the various dictionary keys supplied to the parfile
      generator. Pops the key from the dictionary.

      :param namelist: One of the namelists ("gridlist", "savelist", etc.)
      :type namelist: str
      :param name: The key to check.
      :type name: str
      :param allowed_dtypes: Allowed types for that particular key. Either a single value or a tuple.
      :type allowed_dtypes: class, tuple

      :raises TypeError: If the types do not match, e.g. if "gridpoints" is specified as a float
          value when it should be an integer.

      :returns: **item** -- The item popped from the dictionary corresponding to the given key.
      :rtype: any















      ..
          !! processed by numpydoc !!

   .. py:method:: create_namelist_from_dict(self)

      
      Creates one major namelist from the given dictionary.

      :raises ParfileGenerationError: - If the original dictionary is not empty after everything should be popped
          - If there is an inconsistency between array sizes of dictionary items















      ..
          !! processed by numpydoc !!

   .. py:method:: generate_parfiles(self)

      
      Creates separate parfiles from the main namelist container and writes
      the individual parfiles to disk.

      :returns: **parfiles** -- List containing the paths of the parfiles, can be passed to the legolas
                runner.
      :rtype: list of str















      ..
          !! processed by numpydoc !!


