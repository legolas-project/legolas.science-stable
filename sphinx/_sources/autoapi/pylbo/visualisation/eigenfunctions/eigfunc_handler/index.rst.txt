:py:mod:`pylbo.visualisation.eigenfunctions.eigfunc_handler`
============================================================

.. py:module:: pylbo.visualisation.eigenfunctions.eigfunc_handler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pylbo.visualisation.eigenfunctions.eigfunc_handler.EigenfunctionHandler




.. py:class:: EigenfunctionHandler(data, ef_ax, spec_ax)

   Bases: :py:obj:`pylbo.visualisation.eigenfunctions.eigfunc_interface.EigenfunctionInterface`

   
   Main handler for eigenfunctions.
















   ..
       !! processed by numpydoc !!
   .. py:method:: _check_data_is_present()

      
      Checks if the required data is present to draw for example
      eigenfunctions, is overloaded in subclasses.
















      ..
          !! processed by numpydoc !!

   .. py:method:: update_plot()

      
      Updates the plot when an event is triggered, clears and then redraws
      the functions. Rescaling of the axes is done automatically.
      Has to be overridden in a subclass.
















      ..
          !! processed by numpydoc !!

   .. py:method:: _get_title(ef_name)

      
      Creates the title of the eigenfunction plot.
      If the eigenfunction is retransformed an 'r' is prepended if appropriate,
      along with Re/Im depending on the real/imaginary part shown.

      :param ef_name: The name of the eigenfunction as present in the datfile.
      :type ef_name: str

      :returns: **name** -- The 'new' name for the eigenfunction, used as title.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: _mark_points_without_data_written()

      
      For dataseries, it is possible that not all datasets in the series
      have eigenfunctions associated with them. This routine will toggle a change
      in the opacity value for datapoints with no functions, so they are
      clearly distinguishable from those who do have them.
















      ..
          !! processed by numpydoc !!


