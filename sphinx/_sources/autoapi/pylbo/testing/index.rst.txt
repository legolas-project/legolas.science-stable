pylbo.testing
=============

.. py:module:: pylbo.testing


Classes
-------

.. autoapisummary::

   pylbo.testing.FakeDataSet


Functions
---------

.. autoapisummary::

   pylbo.testing.pickle_dataseries_to_file
   pylbo.testing.load_pickled_dataseries


Module Contents
---------------

.. py:function:: pickle_dataseries_to_file(series, filepath)

.. py:function:: load_pickled_dataseries(filepath)

.. py:class:: FakeDataSet(datfile, seed=None)

   Bases: :py:obj:`pylbo.data_containers.LegolasDataSet`


   
   Main container for a single Legolas dataset.

   :param datfile: Path to the datfile.
   :type datfile: str, ~os.PathLike

   .. attribute:: header

      The datfile header.

      :type: dict

   .. attribute:: grid

      The base grid.

      :type: numpy.ndarray

   .. attribute:: grid_gauss

      The Gaussian grid.

      :type: numpy.ndarray

   .. attribute:: equilibria

      Dictionary containing the equilibrium arrays.

      :type: dict

   .. attribute:: eigenvalues

      Array containing the complex eigenvalues.

      :type: numpy.ndarray

   .. attribute:: geometry

      The geometry.

      :type: str

   .. attribute:: scale_factor

      Array with the scale factor. One for Cartesian geometries, r for cylindrical.

      :type: numpy.ndarray

   .. attribute:: x_start

      Start of the grid.

      :type: float

   .. attribute:: x_end

      End of the grid

      :type: float

   .. attribute:: gridpoints

      The number of base gridpoints.

      :type: int

   .. attribute:: gauss_gridpoints

      The number of Gaussian gridpoints.

      :type: int

   .. attribute:: matrix_gridpoints

      The dimension of the matrix.

      :type: int

   .. attribute:: ef_gridpoints

      The number of eigenfunction gridpoints.

      :type: int

   .. attribute:: gamma

      The ratio of specific heats.

      :type: float

   .. attribute:: eq_type

      The type of equilibrium selected.

      :type: str

   .. attribute:: cgs

      If `True`, all units are in cgs.

      :type: bool

   .. attribute:: units

      Dictionary containing the unit normalisations.

      :type: dict

   .. attribute:: eq_names

      Array containing the names of the equilibrium arrays.

      :type: numpy.ndarray















   ..
       !! processed by numpydoc !!

   .. py:method:: _set_test_equilibria()


   .. py:method:: _set_test_eigenvalues()


