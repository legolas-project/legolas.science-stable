:py:mod:`pylbo.utilities.toolbox`
=================================

.. py:module:: pylbo.utilities.toolbox

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pylbo.utilities.toolbox.timethis
   pylbo.utilities.toolbox.get_axis_geometry
   pylbo.utilities.toolbox.add_pickradius_to_item
   pylbo.utilities.toolbox.custom_enumerate
   pylbo.utilities.toolbox.transform_to_list
   pylbo.utilities.toolbox.transform_to_numpy
   pylbo.utilities.toolbox.solve_cubic_exact



.. py:function:: timethis(func)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: get_axis_geometry(ax)

   
   Retrieves the geometry of a given matplotlib axis.

   :param ax: The axis to retrieve the geometry from.
   :type ax: ~matplotlib.axes.Axes

   :returns: The geometry of the given matplotlib axis.
   :rtype: tuple















   ..
       !! processed by numpydoc !!

.. py:function:: add_pickradius_to_item(item, pickradius)

   
   Makes a matplotlib artist pickable and adds a pickradius.
   We have to handle this separately, because for line2D items the method
   :meth:`~matplotlib.axes.Axes.set_picker` is deprecated from version 3.3 onwards.

   :param item: The artist which will be made pickable
   :type item: ~matplotlib.artist.Artist
   :param pickradius: Sets the pickradius, which determines if something is "on" the picked point.
   :type pickradius: int, float















   ..
       !! processed by numpydoc !!

.. py:function:: custom_enumerate(iterable, start=0, step=1)

   
   Does a custom enumeration with a given stepsize.

   :param iterable: The iterable to iterate over.
   :type iterable: ~typing.Iterable
   :param start: The starting value for enumerate.
   :type start: int
   :param step: The stepsize between enumerate values.
   :type step: int

   :Yields: * **start** (*int*) -- The current index in `iterable`, incremented with `step`.
            * **itr** (*~typing.Iterable*) -- The corresponding entry of `iterable`.















   ..
       !! processed by numpydoc !!

.. py:function:: transform_to_list(obj: any) -> list

   
   Transforms a given input argument `obj` to a list. If `obj`
   is a Numpy-array or tuple, a cast to `list()` is invoked.

   :param obj: The object to transform.
   :type obj: any

   :returns: The object converted to a list.
   :rtype: list















   ..
       !! processed by numpydoc !!

.. py:function:: transform_to_numpy(obj: any) -> numpy.ndarray

   
   Transforms a given input argument `obj` to a numpy array.

   :param obj: The object to transform.
   :type obj: any

   :returns: The object transformed to a numpy array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: solve_cubic_exact(a, b, c, d)

   
   Solves a given cubic polynomial of the form
   :math:`ax^3 + bx^2 + cx + d = 0` using the analytical cubic root formula
   instead of the general `numpy.roots` routine.
   From `StackOverflow <https://math.stackexchange.com/questions
   15865why-not-write-the-solutions-of-a-cubic-this-way/18873#18873/>`_.

   :param a: Cubic coefficient.
   :type a: int, float, complex
   :param b: Quadratic coefficient.
   :type b: int, float, complex
   :param c: Linear coefficient.
   :type c: int, float, complex
   :param d: Constant term
   :type d: int, float, complex

   :returns: **roots** -- The three roots of the cubic polynomial as a Numpy array.
   :rtype: np.ndarray(ndim=3, dtype=complex)















   ..
       !! processed by numpydoc !!

